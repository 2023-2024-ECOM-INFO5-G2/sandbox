name: Application CI
on: [push, pull_request]
jobs:
  pre-test:
    name: 'Gradle Wrapper Validation'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

  test:
    name: 'Backend and frontend tests'
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 18.18.2
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18.18.2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Install node.js packages
        run: npm install
      - name: Run backend test
        run: |
          chmod +x gradlew
          npm run ci:backend:test
      - name: Run frontend test
        run: npm run ci:frontend:test
      - name: Package application
        run: npm run java:jar:prod
      - name: 'E2E: Package'
        run: npm run ci:e2e:package
      - name: 'E2E: Prepare'
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        run: npm run ci:e2e:run
        env:
          CYPRESS_ENABLE_RECORD: true
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      - name: 'E2E: Teardown'
        run: npm run ci:e2e:teardown

  docker:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        environment:
          - development
          - production
    environment:
      name: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18.18.2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Install node.js packages
        run: npm install
      - name: Build docker image
        run: |
          npm run java:docker:prod
          docker tag sandbox ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ secrets.DOCKER_IMAGE_TAG }}
        if: (matrix.environment == 'development' && github.ref == 'refs/heads/feature/addCICD') || (matrix.environment == 'production' && github.ref == 'refs/heads/main')
      - name: Publish docker image
        run: |
          echo ${{ secrets.REGISTRY_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ secrets.DOCKER_IMAGE_TAG }}
        if: (matrix.environment == 'development' && github.ref == 'refs/heads/feature/addCICD') || (matrix.environment == 'production' && github.ref == 'refs/heads/main')

  deploy:
    name: Deployment to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: docker
    strategy:
      matrix:
        environment:
          - development
          - production
    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        if: (matrix.environment == 'development' && github.ref == 'refs/heads/feature/addCICD') || (matrix.environment == 'production' && github.ref == 'refs/heads/main')

      - name: Rsync deployments
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: docker-compose.yml
          remote_path: ${{ secrets.REMOTE_PATH }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
        if: (matrix.environment == 'development' && github.ref == 'refs/heads/feature/addCICD') || (matrix.environment == 'production' && github.ref == 'refs/heads/main')

      - name: SSH into remote server and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            cd ${{secrets.REMOTE_PATH }}
            docker compose --env-file .env -p ${{ matrix.environment }} down|| true
            docker compose --env-file .env -p ${{ matrix.environment }} pull || true
            docker compose --env-file .env -p ${{ matrix.environment }} up -d
        if: (matrix.environment == 'development' && github.ref == 'refs/heads/feature/addCICD') || (matrix.environment == 'production' && github.ref == 'refs/heads/main')
